# Makefile fragment for ROS kernel.
# This is NOT a complete makefile;
# you must run GNU make in the top-level directory
# where the GNUmakefile is located.
#

KERN_SRC_DIR = $(KERN_DIR)/src
OBJDIRS += $(KERN_SRC_DIR)

# entry.S must be first, so that it's the first code in the text segment!!!
#
# We also snatch the use of a couple handy source files
# from the lib directory, to avoid gratuitous code duplication.
KERN_SRCFILES := $(KERN_ARCH_SRCFILES) \
                 $(KERN_SRC_DIR)/init.c \
                 $(KERN_SRC_DIR)/monitor.c \
                 $(KERN_SRC_DIR)/printf.c \
                 $(KERN_SRC_DIR)/sched.c \
                 $(KERN_SRC_DIR)/printfmt.c \
                 $(KERN_SRC_DIR)/smp.c \
                 $(KERN_SRC_DIR)/multiboot.c \
                 $(KERN_SRC_DIR)/readline.c \
                 $(KERN_SRC_DIR)/string.c \
                 $(KERN_SRC_DIR)/atomic.c \
                 $(KERN_SRC_DIR)/workqueue.c \
                 $(KERN_SRC_DIR)/colored_caches.c \
                 $(KERN_SRC_DIR)/page_alloc.c \
                 $(KERN_SRC_DIR)/pmap.c \
                 $(KERN_SRC_DIR)/env.c \
                 $(KERN_SRC_DIR)/manager.c \
                 $(KERN_SRC_DIR)/syscall.c \
                 $(KERN_SRC_DIR)/timer.c \
                 $(KERN_SRC_DIR)/kfs.c \
                 $(KERN_SRC_DIR)/process.c \
                 $(KERN_SRC_DIR)/kmalloc.c \
                 $(KERN_SRC_DIR)/hashtable.c \
                 $(KERN_SRC_DIR)/schedule.c \
                 $(KERN_SRC_DIR)/mm.c \
                 $(KERN_SRC_DIR)/resource.c \
                 $(KERN_SRC_DIR)/slab.c \
                 $(KERN_SRC_DIR)/elf.c \
                 $(KERN_SRC_DIR)/frontend.c \
                 $(KERN_SRC_DIR)/testing.c

# Only build files if they exist.
KERN_SRCFILES := $(wildcard $(KERN_SRCFILES))

KERN_APPFILES := \


ifneq ($(findstring CONFIG_KFS,$(KERN_CFLAGS)),)
$(OBJDIR)/$(KERN_DIR)/kernel: tests

KERN_APPFILES += \
                 $(TESTS_DIR)/tlstest \
                 $(TESTS_DIR)/proctests \
                 $(TESTS_DIR)/fp_test \
                 $(TESTS_DIR)/null \
                 $(TESTS_DIR)/spawn \
                 $(TESTS_DIR)/mproctests \
                 $(TESTS_DIR)/draw_nanwan \
                 $(TESTS_DIR)/hello \
                 $(TESTS_DIR)/mhello \
                 $(TESTS_DIR)/manycore_test
endif

KERN_LDFLAGS   := $(KERN_LDFLAGS) -L$(OBJDIR)/$(KERN_DIR) \
                  -T $(KERN_ARCH_SRC_DIR)/kernel.ld

KERN_OBJFILES  := $(patsubst $(KERN_DIR)/%.c, \
                             $(OBJDIR)/$(KERN_DIR)/%.o, \
                             $(KERN_SRCFILES))
KERN_OBJFILES  := $(patsubst $(KERN_DIR)/%.S, \
                             $(OBJDIR)/$(KERN_DIR)/%.o, \
                             $(KERN_OBJFILES))

KERN_APPFILES  := $(patsubst %, $(OBJDIR)/%, $(KERN_APPFILES))

KERN_LDDEPENDS := $(KERN_OBJFILES) $(KERN_APPFILES) $(ARCH_DIR)/$(TARGET_ARCH)/kernel.ld \
                  $(OBJDIR)/$(KERN_DIR)/libivykern.a

KERN_LDLIBS    := -livykern

KERN_GCC_LIB   ?= $(GCC_LIB)

$(OBJDIR)/$(KERN_DIR)/%.o: $(KERN_DIR)/%.c
	@echo + cc [KERN] $<
	@mkdir -p $(@D)
	$(V)$(CC) $(KERN_CFLAGS) -c -o $@ $<

$(OBJDIR)/$(KERN_DIR)/%.o: $(KERN_DIR)/%.S
	@echo + as [KERN] $<
	@mkdir -p $(@D)
	$(V)$(CC) $(KERN_CFLAGS) -D__ASSEMBLER__ -c -o $@ $<

$(OBJDIR)/$(KERN_DIR)/kernel: $(KERN_LDDEPENDS)
	@echo + ld [KERN] $@
	$(V)$(LD) -o $@ $(KERN_LDFLAGS) $(KERN_OBJFILES) $(KERN_LDLIBS) \
	                $(KERN_GCC_LIB) -b binary $(KERN_APPFILES)
	$(V)$(OBJDUMP) -S $@ > $@.asm
	$(V)$(NM) -n $@ > $@.sym

all: $(OBJDIR)/$(KERN_DIR)/kernel

