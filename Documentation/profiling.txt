Akaros Profiling
===========================
2015-07-15 Barret Rhoden (brho)

Contents
---------------------------
"Kprof"

"Kprof"
---------------------------
Akaros has a very basic sampling profiler, similar to oprofile.  The kernel
generates traces, which you copy off the machine and process on Linux using
Linux perf.
First build the Akaros kernel:

/ $ make && make xcc-headers-install && make apps-install

To get started, make sure #K is mounted.  The basic ifconfig script will do
this, as will:

/ $ bind -a \#K /prof/

You control the profiler with the kpctl file.  The general style is to start
the events that trigger a sample, such as a timer tick, then you start and stop
the profiling.  The distinction between the two steps is that one actually
fires the events (e.g. the timer IRQ), and the other enables *collection*
of profiling info when those events occur.

The timer command takes the core id (or "all"), followed by "on" or "off".
As with all good devices, if you echo garbage, in, you should get the usage as
an errstr.  That'll be kept up to date more than documentation.
The profiler accepts a few configuration options.
There is a queue size limit of 64MB by default, and it is used as circular
buffer, so old data will be dropped.
To change its value:

/ $ echo prof_qlimit SIZE_KB > /prof/kpctl

This should be run before starting the profiler.
There is a limit of the maximum call strace dept, by default 16.
To change it:

/ $ echo prof_btdepth DEPTH > /prof/kpctl

This should be run before starting the profiler as well.
It is possible to configure the timer period, which defaults to 1000us, though
it is not suggested to move too far from the default:

/ $ echo timer period 1000 > /prof/kpctl

And then start the Akaros profiler system-wide.

/ $ echo start > /prof/kpctl
Enable tracing on 0
Enable tracing on 1
Enable tracing on 2
Enable tracing on 3
Enable tracing on 4
Enable tracing on 5
Enable tracing on 6
Enable tracing on 7

Run whatever command you want, then stop the profiler.

/ $ foo
/ $ echo stop > /prof/kpctl

The trace will be then available in the /prof/kpdata file.
The data will be available until the next start of the profiler.
Then copy this on your dev box.
The easiest way is via 9p:

/ $ cp /prof/kpdata /mnt/

Or by using the simple netcat (snc) utility.
On your dev box:

/ $ nc -l PORT > kpdata.data

On Akaros:

/ $ scn -s DEVBOX_IP -p PORT -i /prof/kpdata

In order to process the Akaros kprof file, you need to convert it to the
Linux perf one.
You can do that, on your dev box, with:

/ $ ./tools/profile/kprof2perf/kprof2perf-linux -k `pwd`/obj/kern/akaros-kernel-64b -i kpdata.data -o perf.data

You then need to build the Akaros specific Linux perf binary.
First you need to install (if you have not already) libelf-dev:

\ $ sudo apt-get install libelf-dev

Then pull the Linux kernel source code which is closer to the kernel
version you are running in your dev box, and patch it:

/ $ cd linux
/ $ patch -p 1 < $AKAROS/tools/profile/kprof2perf/perf_patches/perf_patch.diff
/ $ cd tools/perf
/ $ make

Then you should be able to run Linux perf data analysis command on it:
Example:

$ /PATH_TO/perf --root-dir $AKAROS/kern/kfs/ report -g -i perf.data
