# General Purpose configuration parameters
#CFLAGS_KERNEL += $(CONFIG_APPSERVER)
#CFLAGS_USER += $(CONFIG_APPSERVER)

# Kernel configuration parameters
CFLAGS_KERNEL += $(CONFIG_KFS)
#CFLAGS_KERNEL += $(CONFIG_EXT2FS)
#CFLAGS_KERNEL += $(CONFIG_SINGLE_CORE)
#CFLAGS_KERNEL += $(CONFIG_NETWORKING)
#CFLAGS_KERNEL += $(CONFIG_SERIAL_IO)
#CFLAGS_KERNEL += $(CONFIG_BSD_ON_CORE0)
#CFLAGS_KERNEL += $(CONFIG_SPINLOCK_DEBUG)
#CFLAGS_KERNEL += $(CONFIG_SPINPDR_NO_CAS)
# Enabling this can cause userspace to make the kernel panic.
#CFLAGS_KERNEL += $(CONFIG_SEQLOCK_DEBUG)
#CFLAGS_KERNEL += $(CONFIG_PAGE_COLORING)
#CFLAGS_KERNEL += $(CONFIG_DEMAND_PAGING)
#CFLAGS_KERNEL += $(CONFIG_NOMTRRS)
#CFLAGS_KERNEL += $(CONFIG_E1000_MMIO_HACK)
#CFLAGS_KERNEL += $(CONFIG_E1000_ON_BOXBORO)
#CFLAGS_KERNEL += $(CONFIG_E1000_ON_S142)
#CFLAGS_KERNEL += $(CONFIG_ENABLE_MPTABLES)
#CFLAGS_KERNEL += $(CONFIG_MONITOR_ON_INT)
#CFLAGS_KERNEL += $(CONFIG_DISABLE_SMT)
#CFLAGS_KERNEL += $(CONFIG_BOXBORO)
#CFLAGS_KERNEL += $(CONFIG_ARSC_SERVER)
#CFLAGS_KERNEL += $(CONFIG_RESET_STACKS)
#CFLAGS_KERNEL += $(CONFIG_PCI_VERBOSE)
#CFLAGS_KERNEL += $(CONFIG_ETH_AUDIO)
#CFLAGS_KERNEL += $(CONFIG_KB_CORE0_ONLY)
#CFLAGS_KERNEL += $(CONFIG_KTHREAD_POISON)
#CFLAGS_KERNEL += $(CONFIG_PRINTK_NO_BACKSPACE)
#CFLAGS_KERNEL += $(CONFIG_DEBUG_BREAKPOINT)

# Paths for the initramfs (need to be directories)
#INITRAMFS_PATHS = kern/kfs obj/tests
INITRAMFS_PATHS = kern/kfs
#INITRAMFS_BIN = tools/test.sh
#EXT2_BDEV = mnt/ext2fs.img

# Userspace configuration parameters
#CFLAGS_USER += $(CONFIG_SYSCALL_TRAP)
#CFLAGS_USER += $(CONFIG_USER_DEBUGINFO)

# User tests configuration parameters
#CFLAGS_TESTS += $(CONFIG_STATIC_APPS)

# Default for sparc (i.e. needs an appserver)
ifeq ($(TARGET_ARCH),sparc)
CFLAGS_KERNEL += $(CONFIG_APPSERVER)
endif

# brho's custom targets.  Customize to your system.
#$(OBJDIR)/kern/.kvm.touch: $(KERNEL_OBJ)
#	@echo "  (KVM) Copying to mnt/hdd"
#	$(Q)cp $^ mnt/hdd/texas
#	@sync
#	@touch $@
#
#kvm: $(OBJDIR)/kern/.kvm.touch ;
#
#$(OBJDIR)/kern/.usb.touch: $(KERNEL_OBJ)
#	@echo "  (USB) Copying to /dev/sdc4"
#	$(Q)mount /dev/sdc4
#	$(Q)cp $^ /mnt/pornstick/texas
#	@sync
#	$(Q)umount /mnt/pornstick
#	@touch $@
#
#usb: $(OBJDIR)/kern/.usb.touch ;
#
#$(OBJDIR)/kern/.pxe.touch: $(CMP_KERNEL_OBJ)
#	@echo "  (PXE) Copying to Watson"
#	$(Q)scp $^ watson.millennium.berkeley.edu:/tftpboot/akaros/akaros-kernel.gz
#	@touch $@
#
#pxe: $(OBJDIR)/kern/.pxe.touch ;

# various sparc functional simulator configurations
NP ?= 1
fs: all
	sparc_app -p$(NP) -fappserver_ros.conf fs $(KERNEL_OBJ) none
fsd: all
	sparc_app_debug -p$(NP) -fappserver_ros.conf fs $(KERNEL_OBJ) none
hw: all
	sparc_app -p$(NP) -fappserver_ros.conf hw $(KERNEL_OBJ) none

# risc-v functional simulator
rvfs: all
	fesvr -p$(NP) -nopk $(KERNEL_OBJ)
rvfsd: all
	fesvr -d -p$(NP) -nopk $(KERNEL_OBJ)

PHONY += fs fsd hw rvfs rvfsd
